{"version":3,"file":"static/js/777.8d8141ba.chunk.js","mappings":"8QAEaA,EAAWC,EAAAA,GAAAA,GAAH,6NAIZ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAMGC,EAAeJ,EAAAA,GAAAA,GAAH,4CACT,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,QAAQC,MAApB,IAGJC,EAAWP,EAAAA,GAAAA,EAAH,qEACL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,SC6BjB,EAvCa,WACX,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAEd,WAAyBC,GAAzB,iGAE6BC,EAAAA,EAAAA,IAAgBD,GAF7C,OAEUE,EAFV,OAGIR,EAAUQ,EAAWC,MAHzB,gDAKIC,QAAQC,IAAR,MALJ,0DAFc,2DAWdC,CAAUX,GACVG,EAAWS,OACZ,GAAE,CAACZ,KAGF,0BACE,SAACZ,EAAD,UACGU,EAAOe,KAAI,gBAAGR,EAAH,EAAGA,GAAIS,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,OACV,SAACtB,EAAD,UACGsB,GACC,iCACE,gBAAKC,IAAG,UA5BH,mCA4BG,OAAoBD,GAAgBE,IAAKH,KACjD,SAAClB,EAAD,UAAWkB,QAGb,SAAClB,EAAD,UAAWkB,KAPIT,EADT,OAenB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  gap: ${p => p.theme.space[4]}px;\n  margin: 12px auto 16px;\n  padding: 0px;\n  list-style: none;\n`;\n\nexport const CastListItem = styled.li`\n  box-shadow: ${p => p.theme.shadows.shadow};\n`;\n\nexport const CastName = styled.p`\n  margin-top: ${p => p.theme.space[3]}px;\n  text-align: center;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieCredits } from '../../ApiService/ApiService';\nimport { CastList, CastListItem, CastName } from './Cast.styled';\n\nconst baseImageUrl = 'https://image.tmdb.org/t/p/w200';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams() as any;\n\n  useEffect(() => {\n    const controller = new AbortController();\n    async function getActors(id: string) {\n      try {\n        const actorItems = await getMovieCredits(id);\n        setActors(actorItems.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    getActors(movieId);\n    controller.abort();\n  }, [movieId]);\n\n  return (\n    <div>\n      <CastList>\n        {actors.map(({ id, name, profile_path }) => (\n          <CastListItem key={id}>\n            {profile_path ? (\n              <>\n                <img src={`${baseImageUrl}${profile_path}`} alt={name} />\n                <CastName>{name}</CastName>\n              </>\n            ) : (\n              <CastName>{name}</CastName>\n            )}\n          </CastListItem>\n        ))}\n      </CastList>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["CastList","styled","p","theme","space","CastListItem","shadows","shadow","CastName","useState","actors","setActors","movieId","useParams","useEffect","controller","AbortController","id","getMovieCredits","actorItems","cast","console","log","getActors","abort","map","name","profile_path","src","alt"],"sourceRoot":""}